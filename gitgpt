#!/bin/bash

ENV_FILE="$(dirname "$0")/.env"
CHECK_URL="https://api.openai.com/v1/engines"
API_URL="https://api.openai.com/v1/chat/completions"

# Install jq if it's not already installed
if ! command -v jq &>/dev/null; then
  echo "Jq not found. Install jq? (Y/n)"
  read -r response
  response=${response,,} # Convert to lowercase

  if [[ "$response" == "n" ]] || [[ "$response" == "no" ]]; then
    echo "Exiting without installing jq."
    exit 0 
  elif [[ "$response" == "y" ]] || [[ "$response" == "yes" ]]; then
    echo "Installing jq..."
    sudo apt-get update
    sudo apt-get install -y jq
    clear
  else
    echo "Invalid response. Exiting."
    exit 1
  fi
fi

# Check if the current directory is a git repository
if [ ! -d .git ]; then
  echo "This script must be run inside a Git repository."
  exit 1
fi

# Check if .env exists and contains API_KEY
if [[ ! -f "$ENV_FILE" ]]; then
  echo "Please enter your OpenAI API key:"
  read -r API_KEY
  echo "OPENAI_API_KEY=$API_KEY" >"$ENV_FILE"
else
  # Check if API_KEY is in .env
  source "$ENV_FILE"
  if [[ -z "${OPENAI_API_KEY}" ]]; then
    echo "Please enter your OpenAI API key:"
    read -r API_KEY
    echo "OPENAI_API_KEY=$API_KEY" >"$ENV_FILE"
  fi
fi

# Load the API key
source "$ENV_FILE"

# Function to check if the API key is valid
function check_api_key() {
  RESPONSE=$(curl -s -o /dev/null -I -w "%{http_code}" -H "Authorization: Bearer $OPENAI_API_KEY" "$CHECK_URL")
  while [[ "$RESPONSE" != "200" ]]; do
    echo "API key is not valid. Please enter a valid OpenAI API key:"
    read -r OPENAI_API_KEY
    echo "OPENAI_API_KEY=$OPENAI_API_KEY" >"$ENV_FILE"
    RESPONSE=$(curl -s -o /dev/null -I -w "%{http_code}" -H "Authorization: Bearer $OPENAI_API_KEY" "$CHECK_URL")
  done
  echo "API key is valid."
}

check_api_key

diff_output=$(git diff --diff-algorithm=default)

prompt=$'generate a commit message for those changes:\n'
prompt+="$diff_output"

function generate_commit_message() {
  # Generate JSON payload using jq
  json_payload=$(jq -n \
    --arg model "gpt-3.5-turbo" \
    --arg prompt "$prompt" \
    --argjson max_tokens 200 \
    --argjson temperature 0.5 \
    --argjson top_p 1 \
    --argjson frequency_penalty 0 \
    --argjson presence_penalty 0 \
    '{model: $model, messages: [{role: "system", content: "Generate a commit message."}, {role: "user", content: $prompt}], max_tokens: $max_tokens, temperature: $temperature, top_p: $top_p, frequency_penalty: $frequency_penalty, presence_penalty: $presence_penalty}')

  # Call API
  response=$(curl -s "$API_URL" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "$json_payload")

  # Display commit message
  commit_message=$(echo $response | jq -r '.choices[0].message.content')
  echo -e "Suggested Commit Message: $commit_message"
}

generate_commit_message
