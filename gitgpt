#!/bin/bash

set -euo pipefail

ENV_FILE="$(dirname "$0")/.env"
CHECK_URL="https://api.openai.com/v1/engines"
API_URL="https://api.openai.com/v1/chat/completions"

# Show help message
function show_help {
  echo "Usage: gitgpt <command> [options]"
  echo ""
  echo "Commands:"
  echo "  commit         Commit changes"
  echo "  -a, --api          Access API"
  echo "  -v, --verify       Verify something"
  echo ""
  echo "Run 'gitgpt <command> --help' for more information on a command."
}

# Show help message for commit command
function show_commit_help {
  echo "Usage: gitgpt commit [options]"
  echo ""
  echo "Options:"
  echo "  -h, --help     Display this help message"
  echo "  -s, --staged       Commit only staged changes"
}

# Write the API key to the .env file
function change_api_key {
  echo "OPENAI_API_KEY=$1" >"$ENV_FILE"
}

# Function to check if the API key is valid
function check_api_key {
  OPENAI_API_KEY=$1
  RESPONSE=$(curl -s -o /dev/null -I -w "%{http_code}" -H "Authorization: Bearer $OPENAI_API_KEY" "$CHECK_URL")
  while [[ "$RESPONSE" != "200" ]]; do
    echo "API key is not valid. Please enter a valid OpenAI API key:"
    read -r OPENAI_API_KEY
    echo "OPENAI_API_KEY=$OPENAI_API_KEY" >"$ENV_FILE"
    RESPONSE=$(curl -s -o /dev/null -I -w "%{http_code}" -H "Authorization: Bearer $OPENAI_API_KEY" "$CHECK_URL")
  done
  echo "API key is valid."
}

# Install jq if it's not already installed
function install-jq {
  if
    ! command -v jq &>/dev/null
  then
    echo "Jq not found. Install jq? (Y/n)"
    read -r response
    response=${response,,} # Convert to lowercase

    if [[ "$response" == "n" ]] || [[ "$response" == "no" ]]; then
      echo "Exiting without installing jq."
      exit 0
    elif [[ "$response" == "y" ]] || [[ "$response" == "yes" ]]; then
      echo "Installing jq..."
      sudo apt-get update
      sudo apt-get install -y jq
      clear
    else
      echo "Invalid response. Exiting."
      exit 1
    fi
  fi
}

# Check if the current directory is a git repository
function check-if-git-repo {
  if [ ! -d .git ]; then
    echo "This script must be run inside a Git repository."
    exit 1
  fi
}

# Function to check if the .env file exists and contains the API key
function check_env_file {
  if [[ ! -f "$ENV_FILE" ]]; then
    echo "Please enter your OpenAI API key:"
    read -r API_KEY
    change_api_key "$API_KEY"
  else
    # Check if API_KEY is in .env
    # shellcheck source=$HOME/bin/gitgpt/.env
    # shellcheck disable=SC1091
    source "$ENV_FILE"
    if [[ -z "${OPENAI_API_KEY}" ]]; then
      echo "Please enter your OpenAI API key:"
      read -r API_KEY
      change_api_key "$API_KEY"
    fi
  fi
}

# Generate JSON payload using jq
function generate-json {
  json_payload=$(jq -n \
    --arg model "gpt-3.5-turbo" \
    --arg prompt "$1" \
    --argjson max_tokens 200 \
    --argjson temperature 0.5 \
    --argjson top_p 1 \
    --argjson frequency_penalty 0 \
    --argjson presence_penalty 0 \
    '{model: $model, messages: [{role: "system", content: "Generate a commit message."}, {role: "user", content: $prompt}], max_tokens: $max_tokens, temperature: $temperature, top_p: $top_p, frequency_penalty: $frequency_penalty, presence_penalty: $presence_penalty}')
}

function call-api() {
  response=$(curl -s "$API_URL" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $1" \
    -d "$json_payload")
}

function generate_commit_message {
  install-jq
  check-if-git-repo
  check_env_file
  # shellcheck source=$HOME/bin/gitgpt/.env
  # shellcheck disable=SC1091
  source "$ENV_FILE"
  check_api_key "$OPENAI_API_KEY"
  if [[ $1 == "--staged" ]]; then
    diff_output=$(git diff --cached --diff-algorithm=default)
  else
    diff_output=$(git diff --diff-algorithm=default)
  fi
  prompt=$'generate a commit message for those changes:\n'
  prompt+="$diff_output"
  generate-json "$prompt"
  call-api "$OPENAI_API_KEY"
  # Display commit message
  commit_message=$(echo "$response" | jq -r '.choices[0].message.content')
  echo -e "Suggested Commit Message: $commit_message"

}

# Check if there are no arguments
if [[ $# -eq 0 ]]; then
  show_help
  exit 1
fi

# Parse the command
command=$1
shift
case $command in
commit)
  case $1 in
  "")
    echo "gitgpt commit: Commit changes."
    generate_commit_message
    exit 0
    ;;
  --help | -h)
    show_commit_help
    exit 0
    ;;
  --staged | -s)
    echo "gitgpt commit --staged: Commit only staged changes."
    generate_commit_message --staged
    exit 0
    ;;
  *)
    echo "Unknown option for 'commit': $1"
    show_commit_help
    exit 1
    ;;
  esac
  ;;
--api | -a)
  echo "Please enter your OpenAI API key:"
  read -r API_KEY
  change_api_key "$API_KEY"
  exit 0
  ;;
--verify | -v)
  # shellcheck source=$HOME/bin/gitgpt/.env
  # shellcheck disable=SC1091
  source "$ENV_FILE"
  check_api_key "$OPENAI_API_KEY"
  exit 0
  ;;
--help | -h)
  show_help
  exit 0
  ;;
*)
  echo "gitgpt: Command not recognized."
  show_help
  exit 1
  ;;
esac
